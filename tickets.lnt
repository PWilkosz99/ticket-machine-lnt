module tickets is

-- enums
type TicketTimes is
	20min, 1h, 24h, 1msc
end type

type TicketTypes is
	ulgowy, zwykly, grupowy
end type

type PaymentTypes is
	gotowka, karta, blik
end type

-- records
type Ticket is
	Ticket1 (ticket_time: TicketTimes, ticket_type: TicketTypes, ticket_price: int),
	nil
	with get, set, ==
end type

type Payment is
	Payment1 (payment_type: PaymentTypes, ticket: Ticket),
	nil
	with get, set, ==
end type

-- lists
--type TicketList is
--	list of Ticket
--end type

	process Printer[print: any] (message: string) is
		print (message)
	end process

	process TicketMachine[print, cancel: any] is
		var ticketChosen: Ticket, paymentChosen: Payment in
			loop
				TicketLoop[print, cancel] (?ticketChosen);
				PaymentLoop[print, cancel] (ticketChosen, ?paymentChosen);
				Printer[print] ("Zakonczono!")
			end loop
		end var
	end process

-- TICKETS

	process TicketLoop[print, cancel: any] (out ticketChosen: Ticket) is
		hide KupBilet: any in
			ticketChosen := nil;
			while ticketChosen == nil loop
				KupBilet;
				BuyTicket[print, cancel] (?ticketChosen);
				if ticketChosen == nil then
					Printer[print] ("Nie udalo sie wybrac biletu, powtorz czynnosc!")
				else
					Printer[print] ("Bilet wybrany:");
					print(ticketChosen)
				end if
			end loop
		end hide
	end process

	process BuyTicket[print, cancel: any] (out ticketChosen: Ticket) is
		hide bilet_20_minutowy, bilet_1_godzinny, bilet_1_dobowy, bilet_1_miesieczny: any in
			select
				bilet_20_minutowy;
				BuyTicketProcess[print, cancel](20min, ?ticketChosen)
				[]
				bilet_1_godzinny;
				BuyTicketProcess[print, cancel](1h, ?ticketChosen)
				[]
				bilet_1_dobowy;
				BuyTicketProcess[print, cancel](24h, ?ticketChosen)
				[]
				bilet_1_miesieczny;
				BuyTicketProcess[print, cancel](1msc, ?ticketChosen)
				[]
				cancel;
				ticketChosen := nil
			end select
		end hide
	end process

	process BuyTicketProcess[print, cancel: any] (ticket_time: TicketTimes, out ticketChosen: Ticket) is
		hide biltet_ulgowy, bilet_zwykly, bilet_grupowy : any in
			select
				case ticket_time in
					20min ->  
						select 
							biltet_ulgowy;
							Printer[print]("Cena biletu:" & "2"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 2, ?ticketChosen)
							[]
							bilet_zwykly;
							Printer[print]("Cena biletu:" & "4"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 4, ?ticketChosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu:" & "3"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 3, ?ticketChosen)
						end select
					| 1h ->  
						select 
							biltet_ulgowy; 
							Printer[print]("Cena biletu:" & "3"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 3, ?ticketChosen)
							[]
							bilet_zwykly; 
							Printer[print]("Cena biletu:" & "6"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 6, ?ticketChosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu:" & "4"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 4, ?ticketChosen)
						end select
					| 24h ->  
						select 
							biltet_ulgowy; 
							Printer[print]("Cena biletu:" & "8"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 8, ?ticketChosen)
							[]
							bilet_zwykly; 
							Printer[print]("Cena biletu:" & "16"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 16, ?ticketChosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu:" & "10"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 10, ?ticketChosen)
						end select
					| 1msc ->  
						select 
							biltet_ulgowy; 
							Printer[print]("Cena biletu:" & "27"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 27, ?ticketChosen)
							[]
							bilet_zwykly; 
							Printer[print]("Cena biletu:" & "54"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 54, ?ticketChosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu:" & "34"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 34, ?ticketChosen)
						end select
				end case
				[]
				cancel;
				ticketChosen := nil
			end select
		end hide
	end process

	--type arr is
	--	array [0..3] of int
	--end type

	process TicketPriceSetter[print, cancel: any] (ticket_time: TicketTimes, ticket_type: TicketTypes, ticket_cost: int, out ticketChosen: Ticket) is
		hide kup: any in
			select
				kup;
				ticketChosen := Ticket1(ticket_time, ticket_type, ticket_cost)
				[]
				cancel;
				ticketChosen := nil
			end select
		end hide
	end process

-- PAYMENTS

	process PaymentLoop[print, cancel: any] (ticketChosen: Ticket, out paymentChosen: Payment) is
		Printer[print] ("Wybierz metode platnosci:");
		paymentChosen := nil;
		while paymentChosen == nil loop
			SelectPayment[print, cancel] (ticketChosen, ?paymentChosen);
			if paymentChosen == nil then
				Printer[print] ("Tranzakcja nie udana, powtorz platnosc!")
			else
				Printer[print] ("Tranzakcja udana!");
				print(paymentChosen)
			end if
		end loop
	end process

	process SelectPayment[print, cancel:any] (in ticketChosen: Ticket, out paymentChosen: Payment) is
		hide zaplac_gotowka, zaplac_karta, zaplac_blikiem: any in
			select
				zaplac_gotowka; SelectPaymentProcess[print, cancel] (gotowka, ticketChosen, ?paymentChosen)
				[]
				zaplac_karta; SelectPaymentProcess[print, cancel] (karta, ticketChosen, ?paymentChosen)
				[]
				zaplac_blikiem; SelectPaymentProcess[print, cancel] (blik, ticketChosen, ?paymentChosen)
				[]
				cancel;
				paymentChosen := nil
			end select
		end hide
	end process

	process SelectPaymentProcess[print, cancel:any] (payment_type: PaymentTypes, ticketChosen: Ticket, out paymentChosen: Payment) is
		hide zaplac: any in
			select
				zaplac;
				paymentChosen := Payment1(payment_type, ticketChosen)
				[]
				cancel;
				paymentChosen := nil
			end select
		end hide
	end process

end module