module tickets is

-- enums
type TicketTimes is
	20min, 1h, 24h, 1msc
end type

type TicketTypes is
	ulgowy, zwykly, grupowy
end type

type PaymentTypes is
	gotowka, karta, blik
end type
-- end enums

-- records
type Ticket is
	Ticket1 (ticket_time: TicketTimes, ticket_type: TicketTypes, ticket_price: int),
	nil
	with get, set, ==
end type

type Payment is
	Payment1 (payment_type: PaymentTypes, ticket_list: ticketList),
	nil
	with get, set, ==
end type
-- end records

-- lists
type TicketList is
	list of Ticket
	with card
end type
-- end lists

-- channels
channel TicketsChannel is
	(ticket_list: ticketList)
end channel
-- end channels


-- functions
function Size(ticket_list : TicketList) : NAT is
	case ticket_list
		var list_tail: TicketList in
			cons(any Ticket, list_tail) -> return 1 + Size(list_tail)
			|
			nil -> return 0
	end case
end function

function Append(ticket_list : TicketList, ticket_to_add : Ticket) : TicketList is
	case ticket_list
		var current : Ticket, list_tail : TicketList in
			cons (current, list_tail) -> return cons(current, Append(list_tail, ticket_to_add))
			|  
			nil -> return cons(ticket_to_add, nil)
	end case
end function
-- end functions


	process Printer[print: any] (message: string) is
		print (message)
	end process

	process TicketMachine[print, cancel: any, tChannel: TicketsChannel] is
		loop
			par tChannel in
				var ticket_list: ticketList  in
					TicketLoop[print, cancel] (?ticket_list);
					tChannel(ticket_list)
				end var
				||
				var ticket_list: ticketList, payment_chosen: Payment in
					tChannel(?ticket_list);
					PaymentLoop[print, cancel] (ticket_list, ?payment_chosen);
					Printer[print] ("Zakonczono!")
				end var
			end par
		end loop
	end process

-- TICKETS

	process TicketLoop[print, cancel: any] (out ticket_list: TicketList) is
		hide kup_bilet, kup_nastepny_bilet, nie_kupuj_kolejnego_biletu: any in
			kup_bilet;
			var is_next_ticket:bool:=true, ticket_chosen: Ticket in
				ticket_chosen := nil;
				ticket_list := nil;
				while is_next_ticket or (Size(ticket_list) == 0) loop		
					BuyTicket[print, cancel] (?ticket_chosen);

					if ticket_chosen == nil then
						Printer[print] ("Anulowano wybieranie biletu!")
					else 
						ticket_list := Append(ticket_list, ticket_chosen)
					end if;

					select
						kup_nastepny_bilet; 
						is_next_ticket := true
						[]
						nie_kupuj_kolejnego_biletu; 
						is_next_ticket := false
					end select;

					if is_next_ticket == false and (Size(ticket_list) < 1) then
						Printer[print] ("Trzeba wybrac conajmniej jeden bilet!");
						is_next_ticket := true
					end if
				end loop
			end var
		end hide
	end process

	process BuyTicket[print, cancel: any] (out ticket_chosen: Ticket) is
		hide bilet_20_minutowy, bilet_1_godzinny, bilet_1_dobowy, bilet_1_miesieczny: any in
			select
				bilet_20_minutowy;
				BuyTicketProcess[print, cancel](20min, ?ticket_chosen)
				[]
				bilet_1_godzinny;
				BuyTicketProcess[print, cancel](1h, ?ticket_chosen)
				[]
				bilet_1_dobowy;
				BuyTicketProcess[print, cancel](24h, ?ticket_chosen)
				[]
				bilet_1_miesieczny;
				BuyTicketProcess[print, cancel](1msc, ?ticket_chosen)
				[]
				cancel;
				ticket_chosen := nil
			end select
		end hide
	end process

	process BuyTicketProcess[print, cancel: any] (ticket_time: TicketTimes, out ticket_chosen: Ticket) is
		hide biltet_ulgowy, bilet_zwykly, bilet_grupowy : any in
			select
				case ticket_time in
					20min ->  
						select 
							biltet_ulgowy;
							Printer[print]("Cena biletu: " & "2 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 2, ?ticket_chosen)
							[]
							bilet_zwykly;
							Printer[print]("Cena biletu: " & "4 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 4, ?ticket_chosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu: " & "3 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 3, ?ticket_chosen)
						end select
					| 1h ->  
						select 
							biltet_ulgowy; 
							Printer[print]("Cena biletu: " & "3 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 3, ?ticket_chosen)
							[]
							bilet_zwykly; 
							Printer[print]("Cena biletu: " & "6 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 6, ?ticket_chosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu: " & "4 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 4, ?ticket_chosen)
						end select
					| 24h ->  
						select 
							biltet_ulgowy; 
							Printer[print]("Cena biletu: " & "8 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 8, ?ticket_chosen)
							[]
							bilet_zwykly; 
							Printer[print]("Cena biletu: " & "16 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 16, ?ticket_chosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu: " & "10 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 10, ?ticket_chosen)
						end select
					| 1msc ->  
						select 
							biltet_ulgowy; 
							Printer[print]("Cena biletu: " & "27 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,ulgowy, 27, ?ticket_chosen)
							[]
							bilet_zwykly; 
							Printer[print]("Cena biletu: " & "54 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,zwykly, 54, ?ticket_chosen)
							[]
							bilet_grupowy; 
							Printer[print]("Cena biletu: " & "34 zl"); 
							TicketPriceSetter[print, cancel](ticket_time,grupowy, 34, ?ticket_chosen)
						end select
				end case
				[]
				cancel;
				ticket_chosen := nil
			end select
		end hide
	end process

	--type arr is
	--	array [0..3] of int
	--end type

	process TicketPriceSetter[print, cancel: any] (ticket_time: TicketTimes, ticket_type: TicketTypes, ticket_cost: int, out ticket_chosen: Ticket) is
		hide kup: any in
			select
				kup;
				ticket_chosen := Ticket1(ticket_time, ticket_type, ticket_cost)
				[]
				cancel;
				ticket_chosen := nil
			end select
		end hide
	end process

-- PAYMENTS

	process PaymentLoop[print, cancel: any] (in ticket_list: ticketList, out payment_chosen: Payment) is
		Printer[print] ("Wybierz metode platnosci:");
		payment_chosen := nil;
		while payment_chosen == nil loop
			SelectPayment[print, cancel] (ticket_list, ?payment_chosen);
			if payment_chosen == nil then
				Printer[print] ("Transakcja nie udana, powtorz platnosc!")
			else
				Printer[print] ("Transakcja udana!");
				print(payment_chosen)
			end if
		end loop
	end process

	process SelectPayment[print, cancel:any] (in ticket_list: ticketList, out payment_chosen: Payment) is
		hide zaplac_gotowka, zaplac_karta, zaplac_blikiem: any in
			payment_chosen := nil;
			var status : bool in
				status := false;
				while (status == false) loop PaymentLoop in
					select
						zaplac_gotowka; SelectPaymentProcess[print, cancel] (gotowka, ticket_list, ?payment_chosen, ?status)
						[]
						zaplac_karta; SelectPaymentProcess[print, cancel] (karta, ticket_list, ?payment_chosen, ?status)
						[]
						zaplac_blikiem; SelectPaymentProcess[print, cancel] (blik, ticket_list, ?payment_chosen, ?status)
						[]
						cancel;
						break PaymentLoop
					end select
				end loop
			end var
		end hide
	end process

	process SelectPaymentProcess[print, cancel:any] (payment_type: PaymentTypes, ticket_list: ticketList, out payment_chosen: Payment, out status: bool) is
		payment_chosen := nil;
		case payment_type in 
			gotowka -> PayByCash[print, cancel] (?status)
			| karta -> PayByCreditcard[print, cancel] (?status)
			| blik -> PayByBLIK[print, cancel] (?status)
		end case;

		if status == true then
			payment_chosen := Payment1(payment_type, ticket_list)
		end if
	end process


	process PayByCreditcard[print, cancel:any] (out status: bool)  is
		hide odczytaj_karte, wprowadz_pin, transakcja_bezobslugowa, transakcja_autoryzowana: any in
			odczytaj_karte;
			status := false;
			select
				transakcja_bezobslugowa;
				ProcessCreditCardPayment[print, cancel] (?status)
				[]
				transakcja_autoryzowana;
				wprowadz_pin;
				ProcessCreditCardPayment[print, cancel] (?status)
				[]
				cancel
			end select
		end hide
	end process

	process PayByBLIK[print, cancel:any] (out status: bool)  is
		status := false;
		hide wprowadz_kod_BLIK: any in
			select
				wprowadz_kod_BLIK;
				ProcessCreditCardPayment[print, cancel] (?status)
				[]
				cancel
			end select
		end hide
	end process

	process PayByCash[print, cancel:any] (out status: bool)  is
		status :=false;
		hide wrzuc_monety, wydaj_reszte, saldo_zbyt_niskie, saldo_wystarczajace : any in
			loop cashLoop in
				wrzuc_monety;
				select
					saldo_zbyt_niskie
					[]
					saldo_wystarczajace;
					wydaj_reszte;
					status := true;
					break cashLoop
					[]
					cancel;
					wydaj_reszte;
					break cashLoop
				end select
			end loop
		end hide
	end process

	process ProcessCreditCardPayment [print, cancel:any] (out status: bool) is
		hide transakcja_zaakceptowana, transakcja_odrzucona : any in
			select
				transakcja_zaakceptowana;
				status := true
				[]
				transakcja_odrzucona;
				status := false
			end select
		end hide
	end process

end module